#!/bin/bash
# Production Setup and Deployment Script for Task Manager API

set -e

echo "🚀 Task Manager API - Production Setup Script"
echo "=============================================="

# Function to check if environment variable is set
check_env_var() {
    local var_name=$1
    local var_value=${!var_name}
    
    if [ -z "$var_value" ]; then
        echo "❌ $var_name is not set"
        return 1
    else
        echo "✅ $var_name is configured"
        return 0
    fi
}

# Function to test database connection
test_database() {
    echo "🗄️ Testing database connection..."
    if bundle exec rails runner "ActiveRecord::Base.connection.execute('SELECT 1')" > /dev/null 2>&1; then
        echo "✅ Database connection successful"
        return 0
    else
        echo "❌ Database connection failed"
        return 1
    fi
}

# Function to test email configuration
test_email() {
    echo "📧 Testing email configuration..."
    if [ -n "$SMTP_USERNAME" ] && [ -n "$SMTP_PASSWORD" ]; then
        echo "✅ SMTP credentials configured"
        # Optional: Test sending email (uncomment to enable)
        # bundle exec rails runner "ActionMailer::Base.mail(to: '$SMTP_USERNAME', subject: 'Test', body: 'Test').deliver_now"
        return 0
    else
        echo "⚠️ SMTP not configured - password resets will not work"
        return 1
    fi
}

# Function to test storage service
test_storage() {
    echo "📁 Testing storage service..."
    local service=${ACTIVE_STORAGE_SERVICE:-local}
    case $service in
        "amazon")
            if [ -n "$AWS_ACCESS_KEY_ID" ] && [ -n "$AWS_SECRET_ACCESS_KEY" ] && [ -n "$AWS_S3_BUCKET" ]; then
                echo "✅ AWS S3 configuration complete"
                return 0
            else
                echo "❌ AWS S3 configuration incomplete"
                return 1
            fi
            ;;
        "google")
            if [ -n "$GCP_PROJECT" ] && [ -n "$GCP_BUCKET" ]; then
                echo "✅ Google Cloud Storage configuration complete"
                return 0
            else
                echo "❌ Google Cloud Storage configuration incomplete"
                return 1
            fi
            ;;
        "local")
            echo "✅ Using local storage"
            return 0
            ;;
        *)
            echo "⚠️ Unknown storage service: $service"
            return 1
            ;;
    esac
}

echo ""
echo "🔍 Checking Environment Configuration"
echo "======================================"

# Check critical environment variables
REQUIRED_VARS=("JWT_SECRET" "SECRET_KEY_BASE" "RAILS_MASTER_KEY")
OPTIONAL_VARS=("DATABASE_URL" "SMTP_USERNAME" "SMTP_PASSWORD" "APP_HOST" "CORS_ORIGINS")

all_required_set=true
for var in "${REQUIRED_VARS[@]}"; do
    if ! check_env_var "$var"; then
        all_required_set=false
    fi
done

echo ""
echo "📋 Optional Configuration Status"
echo "==============================="
for var in "${OPTIONAL_VARS[@]}"; do
    check_env_var "$var" || true
done

if [ "$all_required_set" = false ]; then
    echo ""
    echo "❌ Critical environment variables are missing!"
    echo "Please check your .env.production file and ensure all required variables are set."
    echo ""
    echo "Quick fix:"
    echo "1. Copy .env.production.example to .env.production"
    echo "2. Fill in your actual values"
    echo "3. Run: source .env.production"
    echo "4. Run this script again"
    exit 1
fi

echo ""
echo "🧪 Testing Service Connections"
echo "=============================="

# Test services
test_database
test_email || echo "⚠️ Email service not configured - some features may not work"
test_storage

echo ""
echo "📦 Installing Dependencies"
echo "========================="
bundle install --without development test

echo ""
echo "🗄️ Database Setup"
echo "================="
export RAILS_ENV=production

# Create database if it doesn't exist
echo "Creating database (if needed)..."
bundle exec rails db:create || echo "Database already exists"

echo "Running migrations..."
bundle exec rails db:migrate

if [ "$1" = "--seed" ]; then
    echo "🌱 Seeding database..."
    bundle exec rails db:seed
fi

echo ""
echo "🏗️ Asset Compilation"
echo "===================="
bundle exec rails assets:precompile || echo "No assets to compile"

echo ""
echo "🧪 Running Tests"
echo "================"
if bundle exec rspec --format progress; then
    echo "✅ All tests passed!"
else
    echo "❌ Some tests failed!"
    echo "Please fix failing tests before deploying to production."
    exit 1
fi

echo ""
echo "🏥 Application Health Check"
echo "=========================="
if bundle exec rails runner "puts 'Application loaded successfully'" > /dev/null 2>&1; then
    echo "✅ Application is healthy and ready for production!"
else
    echo "❌ Application health check failed!"
    exit 1
fi

echo ""
echo "🎉 Production Setup Complete!"
echo "============================="
echo ""
echo "📊 Summary:"
echo "  - Ruby: $(ruby --version | cut -d' ' -f2)"
echo "  - Rails: $(bundle exec rails --version)"
echo "  - Database: PostgreSQL ✅"
echo "  - Storage: ${ACTIVE_STORAGE_SERVICE:-local} ✅"
echo "  - Email: ${SMTP_ADDRESS:-Not configured}"
echo "  - Tests: All passing ✅"
echo ""
echo "🚀 Next Steps:"
echo "  1. Choose your deployment platform (Heroku, Railway, Render, etc.)"
echo "  2. Set environment variables on your platform"
echo "  3. Deploy your application"
echo "  4. Run post-deployment health checks"
echo ""
echo "📚 Documentation:"
echo "  - API Docs: /api-docs"
echo "  - Health Check: /up"
echo "  - Service Setup: See SERVICE_SETUP.md"
echo ""
echo "🔗 Your Task Manager API is production-ready!"

# Show deployment command suggestions
echo ""
echo "💡 Quick Deploy Commands:"
echo "========================="
echo ""
echo "For Heroku:"
echo "  git push heroku main"
echo "  heroku run rails db:migrate"
echo ""
echo "For Railway:"
echo "  Connect your GitHub repo at railway.app"
echo ""
echo "For Docker:"
echo "  docker build -t task-manager-api ."
echo "  docker run -p 3000:3000 --env-file .env.production task-manager-api"
