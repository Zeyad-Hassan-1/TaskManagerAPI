openapi: 3.0.0
info:
  title: Task manager API
  version: 1.0.0
servers:
- url: https://exciting-hopefully-joey.ngrok-free.app/api/v1
  description: Production server (static ngrok domain)
- url: http://localhost:3000/api/v1
  description: Local development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Enter JWT token obtained from /login endpoint
  schemas:
    Invitation:
      type: object
      properties:
        id:
          type: integer
          example: 1
        status:
          type: string
          enum: [pending, accepted, declined]
          example: pending
        role:
          type: string
          example: member
        inviter:
          type: object
          properties:
            id:
              type: integer
              example: 1
            username:
              type: string
              example: john_doe
            email:
              type: string
              example: john@example.com
        invitable:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: My Team
            type:
              type: string
              enum: [Team, Project]
              example: Team
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
    Activity:
      type: object
      properties:
        id:
          type: integer
          example: 1
        action:
          type: string
          example: invited
        read_at:
          type: string
          format: date-time
          nullable: true
          example: null
        actor:
          type: object
          properties:
            id:
              type: integer
              example: 1
            username:
              type: string
              example: john_doe
        notifiable:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: My Team
            type:
              type: string
              enum: [Team, Project, Task]
              example: Team
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
    Error:
      type: object
      properties:
        error:
          type: string
          example: "Error message"
    Success:
      type: object
      properties:
        message:
          type: string
          example: "Operation successful"
tags:
- name: JWT Auth
- name: Team controller
- name: Team controller > members
- name: Project controller
- name: Project controller > comments
- name: Project controller > tags
- name: Project controller > members
- name: Project controller > attachments
- name: Tasks controller
- name: Tasks controller > Sub_tasks
- name: Tasks controller > comments
- name: Tasks controller > tags
- name: Tasks controller > members
- name: Tasks controller > attachments
- name: Invitations controller
- name: Activities controller
paths:
  /signup:
    post:
      tags:
      - JWT Auth
      summary: signup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: user21
                email: usefr1@mail.com
                password: '123456'
                bio: test
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /login:
    post:
      tags:
      - JWT Auth
      summary: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: user2
                password: new password
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /me:
    get:
      tags:
      - JWT Auth
      summary: me
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /password_resets:
    post:
      tags:
      - JWT Auth
      summary: password reset token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: user1@mail.com
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - JWT Auth
      summary: password update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                password: new password
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: token
        in: query
        schema:
          type: string
        example: h2DTi3VzEycEgmWwl-7IjA
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /refresh:
    post:
      tags:
      - JWT Auth
      summary: refresh access token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: ''
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /logout:
    post:
      tags:
      - JWT Auth
      summary: logout
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: ''
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /teams/{id}/invite_member:
    post:
      tags:
      - Team controller > members
      summary: invite member
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"username\": \"user21\",\n    \"role\": \"member\"\n}"'
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '27'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /teams/{id}/members/{user_id}:
    delete:
      tags:
      - Team controller > members
      summary: remove member
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '27'
      - name: user_id
        in: path
        schema:
          type: integer
        required: true
        example: '48'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
  /teams/{id}/members/{user_id}/promote:
    put:
      tags:
      - Team controller > members
      summary: promote member
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: ''
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '27'
      - name: user_id
        in: path
        schema:
          type: integer
        required: true
        example: '48'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
  /teams/{id}/members/{user_id}/demote:
    put:
      tags:
      - Team controller > members
      summary: demote member
      requestBody:
        content: {}
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '27'
      - name: user_id
        in: path
        schema:
          type: integer
        required: true
        example: '48'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
  /teams:
    get:
      tags:
      - Team controller
      summary: index teams
      description: 'This is a GET request and it is used to "get" data from an endpoint.
        There is no request body for a GET request, but you can use query parameters
        to help specify the resource you want data on (e.g., in this request, we have
        `id=1`).


        A successful GET response will have a `200 OK` status, and should include
        some kind of response body - for example, HTML web content or JSON data.'
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
    post:
      tags:
      - Team controller
      summary: create teams
      description: 'This is a POST request, submitting data to an API via the request
        body. This request submits JSON data, and the data is reflected in the response.


        A successful POST request typically returns a `200 OK` or `201 Created` response
        code.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                team:
                  name: Team 2
                  description: description
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
  /teams/{id}:
    get:
      tags:
      - Team controller
      summary: show team
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '27'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - Team controller
      summary: update team
      description: 'This is a PUT request and it is used to overwrite an existing
        piece of data. For instance, after you create an entity with a POST request,
        you may want to modify that later. You can do that using a PUT request. You
        typically identify the entity being updated by including an identifier in
        the URL (eg. `id=1`).


        A successful PUT request typically returns a `200 OK`, `201 Created`, or `204
        No Content` response code.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                team:
                  name: Team 1
                  discription: team discription
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '27'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
    delete:
      tags:
      - Team controller
      summary: Delete team
      description: 'This is a DELETE request, and it is used to delete data that was
        previously created via a POST request. You typically identify the entity being
        updated by including an identifier in the URL (eg. `id=1`).


        A successful DELETE request typically returns a `200 OK`, `202 Accepted`,
        or `204 No Content` response code.'
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '28'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
  /projects/{project_id}/comments:
    post:
      tags:
      - Project controller > comments
      summary: add comment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                content: content of comment
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        example: '12'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
  /projects/{project_id}/comments/{id}:
    delete:
      tags:
      - Project controller > comments
      summary: remove comment
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        example: '12'
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '3'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - Project controller > comments
      summary: update comment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                content: updated
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        example: '12'
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '3'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /projects/{project_id}/tags:
    post:
      tags:
      - Project controller > tags
      summary: add tag
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: tag 1
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        example: '12'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
  /projects/{project_id}/tags/{id}:
    delete:
      tags:
      - Project controller > tags
      summary: remove tag
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        example: '12'
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '3'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /projects/{id}/invite_member:
    post:
      tags:
      - Project controller > members
      summary: invite member
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\n    \"username\": \"user21\",\n    \"role\": \"member\"\n}"'
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '12'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /projects/{id}/members/{user_id}:
    delete:
      tags:
      - Project controller > members
      summary: remove member
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '12'
      - name: user_id
        in: path
        schema:
          type: integer
        required: true
        example: '48'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
  /projects/{id}/members/{user_id}/promote:
    put:
      tags:
      - Project controller > members
      summary: promote member
      requestBody:
        content: {}
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '12'
      - name: user_id
        in: path
        schema:
          type: integer
        required: true
        example: '48'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
  /projects/{id}/members/{user_id}/demote:
    put:
      tags:
      - Project controller > members
      summary: demote member
      requestBody:
        content: {}
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '12'
      - name: user_id
        in: path
        schema:
          type: integer
        required: true
        example: '48'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
  /projects/{project_id}/attachments:
    post:
      tags:
      - Project controller > attachments
      summary: add attachment
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                link:
                  type: string
                  example: www.facebook.com
                file:
                  type: string
                  format: binary
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        example: '12'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
  /projects/{project_id}/attachments/{id}:
    delete:
      tags:
      - Project controller > attachments
      summary: remove attachment
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        example: '12'
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '5'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
  /teams/{team_id}/projects:
    get:
      tags:
      - Project controller
      summary: index projects
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: team_id
        in: path
        schema:
          type: integer
        required: true
        example: '27'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
    post:
      tags:
      - Project controller
      summary: create project
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                project:
                  name: project 1
                  description: gyucflids.ljcofe;
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: team_id
        in: path
        schema:
          type: integer
        required: true
        example: '27'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
  /projects/{id}:
    get:
      tags:
      - Project controller
      summary: show project
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '11'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
    put:
      tags:
      - Project controller
      summary: update project
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                project:
                  name: project 2
                  discription: project discription
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '11'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - Project controller
      summary: delete project
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '11'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /tasks/{id}/sub_tasks:
    get:
      tags:
      - Tasks controller > Sub_tasks
      summary: index sub_tasks
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '14'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
    post:
      tags:
      - Tasks controller > Sub_tasks
      summary: create sub_task
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                task:
                  name: sub_task 1
                  description: description of sub task 1
                  priority: 1
                  due_date: '2025-08-25T10:20:00Z'
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '14'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /sub_tasks/{id}:
    put:
      tags:
      - Tasks controller > Sub_tasks
      summary: update sub_task
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                task:
                  name: sub_task 1 edited
                  description: description of sub task 1 edited
                  priority: 2
                  due_date: '2025-08-25T11:20:00Z'
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '14'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - Tasks controller > Sub_tasks
      summary: delete sub_task
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '15'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /sub_tasks/{id}/assign_member:
    post:
      tags:
      - Tasks controller > Sub_tasks
      summary: assign member sub_task
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: user21
                role: assignee
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '15'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /sub_tasks/{id}/members/{user_id}:
    delete:
      tags:
      - Tasks controller > Sub_tasks
      summary: remove member sub_task
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '15'
      - name: user_id
        in: path
        schema:
          type: integer
        required: true
        example: '48'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /tasks/{task_id}/comments:
    post:
      tags:
      - Tasks controller > comments
      summary: add comment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                content: content of comment
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: task_id
        in: path
        schema:
          type: integer
        required: true
        example: '14'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
  /tasks/{task_id}/comments/{id}:
    delete:
      tags:
      - Tasks controller > comments
      summary: remove comment
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: task_id
        in: path
        schema:
          type: integer
        required: true
        example: '14'
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '4'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - Tasks controller > comments
      summary: update comment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                content: updated
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: task_id
        in: path
        schema:
          type: integer
        required: true
        example: '14'
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '4'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /tasks/{task_id}/tags:
    post:
      tags:
      - Tasks controller > tags
      summary: add tag
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: study
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: task_id
        in: path
        schema:
          type: integer
        required: true
        example: '14'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
  /tasks/{task_id}/tags/{id}:
    delete:
      tags:
      - Tasks controller > tags
      summary: remove tag
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: task_id
        in: path
        schema:
          type: integer
        required: true
        example: '14'
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '4'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /tasks/{id}/assign_member:
    post:
      tags:
      - Tasks controller > members
      summary: assign member
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: user21
                role: assignee
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '14'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /tasks/{id}/members/{user_id}:
    delete:
      tags:
      - Tasks controller > members
      summary: remove member
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '14'
      - name: user_id
        in: path
        schema:
          type: integer
        required: true
        example: '48'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /tasks/{id}/attachments:
    post:
      tags:
      - Tasks controller > attachments
      summary: add attachment
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                link:
                  type: string
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '14'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
  /tasks/{task_id}/attachments/{id}:
    delete:
      tags:
      - Tasks controller > attachments
      summary: remove attachment
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: task_id
        in: path
        schema:
          type: integer
        required: true
        example: '14'
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '6'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
  /projects/{project_id}/tasks:
    get:
      tags:
      - Tasks controller
      summary: index tasks
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        example: '12'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
    post:
      tags:
      - Tasks controller
      summary: create task
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                task:
                  name: task 1
                  description: description of task 2
                  priority: 1
                  due_date: '2025-08-25T7:54:00Z'
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: project_id
        in: path
        schema:
          type: integer
        required: true
        example: '12'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
  /tasks/{id}:
    get:
      tags:
      - Tasks controller
      summary: show task
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '14'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - bearerAuth: []
    put:
      tags:
      - Tasks controller
      summary: update task
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                task:
                  name: task 1 edited
                  description: description of task 2
                  priority: 1
                  due_date: '2025-08-25T7:54:00Z'
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '14'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - Tasks controller
      summary: delete task
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '14'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /invitations:
    get:
      tags:
      - Invitations controller
      summary: List pending invitations
      description: Get all pending invitations for the current user
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invitation'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /invitations/{id}:
    put:
      tags:
      - Invitations controller
      summary: Accept or decline invitation
      description: Update the status of an invitation (accept or decline)
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '1'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [accepted, declined]
                  example: accepted
              required:
              - status
      responses:
        '200':
          description: Invitation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '404':
          description: Invitation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Invalid status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - Invitations controller
      summary: Decline invitation
      description: Decline an invitation by deleting it
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        schema:
          type: integer
        required: true
        example: '1'
      responses:
        '200':
          description: Invitation declined successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '404':
          description: Invitation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /activities:
    get:
      tags:
      - Activities controller
      summary: List user activities
      description: Get all activities/notifications for the current user
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /activities/mark_as_read:
    post:
      tags:
      - Activities controller
      summary: Mark all notifications as read
      description: Mark all unread notifications as read for the current user
      security:
      - bearerAuth: []
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Notifications marked as read successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
