{
	"info": {
		"_postman_id": "task-manager-rbac-tests",
		"name": "Task Manager API - Role-Based Access Control Tests",
		"description": "Comprehensive test collection for the Task Manager API role-based access control system. This collection tests all three roles (Member, Admin, Owner) and their permissions.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000/api/v1",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "owner_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "admin_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "member_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "team_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "project_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "task_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "owner_user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "admin_user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "member_user_id",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "üîê Authentication Setup",
			"item": [
				{
					"name": "1. Create Owner User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Owner user created successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"owner_user_id\", responseJson.data.id);",
									"    console.log(\"Owner User ID set to:\", responseJson.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"username\": \"owner_user\",\n    \"email\": \"owner@test.com\",\n    \"password\": \"password123\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/signup",
							"host": ["{{base_url}}"],
							"path": ["signup"]
						}
					}
				},
				{
					"name": "2. Create Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin user created successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"admin_user_id\", responseJson.data.id);",
									"    console.log(\"Admin User ID set to:\", responseJson.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"username\": \"admin_user\",\n    \"email\": \"admin@test.com\",\n    \"password\": \"password123\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/signup",
							"host": ["{{base_url}}"],
							"path": ["signup"]
						}
					}
				},
				{
					"name": "3. Create Member User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Member user created successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"member_user_id\", responseJson.data.id);",
									"    console.log(\"Member User ID set to:\", responseJson.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"username\": \"member_user\",\n    \"email\": \"member@test.com\",\n    \"password\": \"password123\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/signup",
							"host": ["{{base_url}}"],
							"path": ["signup"]
						}
					}
				},
				{
					"name": "4. Login as Owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Owner login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"owner_token\", responseJson.access_token);",
									"    pm.environment.set(\"access_token\", responseJson.access_token);",
									"    console.log(\"Owner token set\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"owner_user\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": ["{{base_url}}"],
							"path": ["login"]
						}
					}
				},
				{
					"name": "5. Login as Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"admin_token\", responseJson.access_token);",
									"    console.log(\"Admin token set\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"admin_user\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": ["{{base_url}}"],
							"path": ["login"]
						}
					}
				},
				{
					"name": "6. Login as Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Member login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"member_token\", responseJson.access_token);",
									"    console.log(\"Member token set\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"member_user\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": ["{{base_url}}"],
							"path": ["login"]
						}
					}
				}
			]
		},
		{
			"name": "üè¢ Team Management (Owner Role)",
			"item": [
				{
					"name": "1. Create Team (Owner)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"owner_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Team created successfully by owner\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"team_id\", responseJson.data.id);",
									"    console.log(\"Team ID set to:\", responseJson.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"team\": {\n    \"name\": \"RBAC Test Team\",\n    \"discription\": \"A team for testing role-based access control\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/teams",
							"host": ["{{base_url}}"],
							"path": ["teams"]
						}
					}
				},
				{
					"name": "2. Invite Admin to Team (Owner)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"owner_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin invited successfully by owner\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.message).to.include(\"invited successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"admin_user\",\n  \"role\": \"admin\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/teams/{{team_id}}/invite_member",
							"host": ["{{base_url}}"],
							"path": ["teams", "{{team_id}}", "invite_member"]
						}
					}
				},
				{
					"name": "3. Invite Member to Team (Owner)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"owner_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Member invited successfully by owner\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.message).to.include(\"invited successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"member_user\",\n  \"role\": \"member\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/teams/{{team_id}}/invite_member",
							"host": ["{{base_url}}"],
							"path": ["teams", "{{team_id}}", "invite_member"]
						}
					}
				}
			]
		},
		{
			"name": "üìÅ Project Management (Admin Role)",
			"item": [
				{
					"name": "1. Create Project (Admin)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"admin_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Project created successfully by admin\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"project_id\", responseJson.data.id);",
									"    console.log(\"Project ID set to:\", responseJson.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"project\": {\n    \"name\": \"RBAC Test Project\",\n    \"discription\": \"A project for testing role-based access control\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/teams/{{team_id}}/projects",
							"host": ["{{base_url}}"],
							"path": ["teams", "{{team_id}}", "projects"]
						}
					}
				},
				{
					"name": "2. Invite Member to Project (Admin)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"admin_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Member invited to project successfully by admin\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.message).to.include(\"invited successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"member_user\",\n  \"role\": \"member\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/projects/{{project_id}}/invite_member",
							"host": ["{{base_url}}"],
							"path": ["projects", "{{project_id}}", "invite_member"]
						}
					}
				},
				{
					"name": "3. Create Task (Admin)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"admin_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Task created successfully by admin\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"task_id\", responseJson.data.id);",
									"    console.log(\"Task ID set to:\", responseJson.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base_url}}/projects/{{project_id}}/tasks",
							"host": ["{{base_url}}"],
							"path": ["projects", "{{project_id}}", "tasks"]
						}
					}
				},
				{
					"name": "4. Assign Member to Task (Admin)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"admin_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Member assigned to task successfully by admin\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.message).to.include(\"assigned to task successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"member_user\",\n  \"role\": \"assignee\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}/assign_member",
							"host": ["{{base_url}}"],
							"path": ["tasks", "{{task_id}}", "assign_member"]
						}
					}
				}
			]
		},
		{
			"name": "üö´ Permission Tests (Member Role)",
			"item": [
				{
					"name": "1. Try to Create Team (Member) - Should Fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"member_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Member cannot create team - should get 403 or fail\", function () {",
									"    // Member can create teams but becomes owner, so this should actually succeed",
									"    // This tests that members can create their own teams",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"team\": {\n    \"name\": \"Member Test Team\",\n    \"discription\": \"Team created by member\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/teams",
							"host": ["{{base_url}}"],
							"path": ["teams"]
						}
					}
				},
				{
					"name": "2. Try to Invite to Team (Member) - Should Fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"member_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Member cannot invite to team - should get 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response contains permission error\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.error).to.include(\"permission\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"admin_user\",\n  \"role\": \"member\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/teams/{{team_id}}/invite_member",
							"host": ["{{base_url}}"],
							"path": ["teams", "{{team_id}}", "invite_member"]
						}
					}
				},
				{
					"name": "3. Try to Create Project (Member) - Should Fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"member_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Member cannot create project - should get 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response contains permission error\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.error).to.include(\"permission\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"project\": {\n    \"name\": \"Member Test Project\",\n    \"discription\": \"Project created by member\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/teams/{{team_id}}/projects",
							"host": ["{{base_url}}"],
							"path": ["teams", "{{team_id}}", "projects"]
						}
					}
				},
				{
					"name": "4. Try to Create Task (Member) - Should Fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"member_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Member cannot create task - should get 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response contains permission error\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.error).to.include(\"permission\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base_url}}/projects/{{project_id}}/tasks",
							"host": ["{{base_url}}"],
							"path": ["projects", "{{project_id}}", "tasks"]
						}
					}
				}
			]
		},
		{
			"name": "üö´ Permission Tests (Admin Role)",
			"item": [
				{
					"name": "1. Try to Delete Team (Admin) - Should Fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"admin_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin cannot delete team - should get 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response contains permission error\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.error).to.include(\"permission\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teams/{{team_id}}",
							"host": ["{{base_url}}"],
							"path": ["teams", "{{team_id}}"]
						}
					}
				},
				{
					"name": "2. Try to Remove Member (Admin) - Should Fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"admin_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin cannot remove member - should get 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response contains permission error\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.error).to.include(\"permission\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teams/{{team_id}}/members/{{member_user_id}}",
							"host": ["{{base_url}}"],
							"path": ["teams", "{{team_id}}", "members", "{{member_user_id}}"]
						}
					}
				},
				{
					"name": "3. Try to Promote Member (Admin) - Should Fail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"admin_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin cannot promote member - should get 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response contains permission error\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.error).to.include(\"permission\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teams/{{team_id}}/members/{{member_user_id}}/promote",
							"host": ["{{base_url}}"],
							"path": ["teams", "{{team_id}}", "members", "{{member_user_id}}", "promote"]
						}
					}
				}
			]
		},
		{
			"name": "üëë Owner Privileges",
			"item": [
				{
					"name": "1. Promote Member to Admin (Owner)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"owner_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Owner can promote member successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.message).to.include(\"promoted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teams/{{team_id}}/members/{{member_user_id}}/promote",
							"host": ["{{base_url}}"],
							"path": ["teams", "{{team_id}}", "members", "{{member_user_id}}", "promote"]
						}
					}
				},
				{
					"name": "2. Demote Admin to Member (Owner)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"owner_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Owner can demote admin successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.message).to.include(\"demoted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teams/{{team_id}}/members/{{member_user_id}}/demote",
							"host": ["{{base_url}}"],
							"path": ["teams", "{{team_id}}", "members", "{{member_user_id}}", "demote"]
						}
					}
				},
				{
					"name": "3. Delete Task (Owner)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"owner_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Owner can delete task successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.message).to.include(\"deleted successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}",
							"host": ["{{base_url}}"],
							"path": ["tasks", "{{task_id}}"]
						}
					}
				},
				{
					"name": "4. Delete Project (Owner)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"owner_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Owner can delete project successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.message).to.include(\"deleted successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/projects/{{project_id}}",
							"host": ["{{base_url}}"],
							"path": ["projects", "{{project_id}}"]
						}
					}
				},
				{
					"name": "5. Delete Team (Owner)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"owner_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Owner can delete team successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.message).to.include(\"deleted successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teams/{{team_id}}",
							"host": ["{{base_url}}"],
							"path": ["teams", "{{team_id}}"]
						}
					}
				}
			]
		},
		{
			"name": "‚úÖ View Permissions (All Roles)",
			"item": [
				{
					"name": "1. Get Teams (Owner)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"owner_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Owner can view teams\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teams",
							"host": ["{{base_url}}"],
							"path": ["teams"]
						}
					}
				},
				{
					"name": "2. Get Teams (Admin)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"admin_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin can view teams\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teams",
							"host": ["{{base_url}}"],
							"path": ["teams"]
						}
					}
				},
				{
					"name": "3. Get Teams (Member)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"access_token\", pm.environment.get(\"member_token\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Member can view teams\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/teams",
							"host": ["{{base_url}}"],
							"path": ["teams"]
						}
					}
				}
			]
		}
	]
}
